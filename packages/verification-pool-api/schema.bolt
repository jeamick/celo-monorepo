/**
 * Node Types
 */
type MobileVerifier {
  address: String | Null,    // Address to deposit verification reward to.
  fcmToken: String,          // Firebase Cloud Messaging Reg token from verification app.
  name: String,              // User's provided name
  phoneNum: String,          // Phone number of verification phone.
  supportedRegion: String,   // Country ISO code the user is willing to send to
  isVerifying: Boolean,      // Has verification currently enabled
  attemptCount: Number | Null,  // Number of times a request has dispatched without being acknowledged 
}

type SMSMessage {
  phoneNum: String,               // Phone number to send verification code to.
  address: String,                // Address of new user
  message: String,                // Message to be sent from the verifier to the phone to be verified
  verifierId: String | Null       // Key of the verifier who successfully verified the message,
                                  // Null if unsuccessful, 'Twilio' if verified by Twilio.
  verifierCandidates: String | Null // List of verifier ids that have been selected for this message
  startTime: Number               // Timestamp when the service created the message
  finishTime: Number | Null       // Timestamp when SMS was sent or the service confirmed it failed. Null if not yet finished
  messageState: Number            // String representing the rewards distribution state of this message
}

type Rewards {
  isRewarding: Boolean            // Lock to prevent race conditions during pool rewarding
}

/**
 * Node Paths
 */

path /{environment}/mobileVerifiers {
  index() {[ "isVerifying" ]}
}

path /{environment}/mobileVerifiers/{uid} is MobileVerifier {
  read() { isCurrentUser(uid) }
  write() { isCurrentUser(uid) }
}

path /{environment}/messages {
  index() {[ "messageState", "phoneNum" ]}
}

path /{environment}/messages/{key} is SMSMessage {
  read() { isUserInString(this.verifierCandidates) }
  write() { isUserInString(this.verifierCandidates) }
}

path /{environment}/rewards is Rewards {
  // Only admin access
  read() { false }
  write() { false }
}

/**
 * Helper Functions
 */

isCurrentUser(uid) { auth != null && auth.uid == uid }

isUserInString(value) { auth != null && value != null && value.includes(auth.uid) }

isLoggedIn() { auth != null }

isNew(ref) { prior(ref) == null }

isDelete(ref) { ref == null }

// Returns true if the value is initialized to init, or if it retains it's prior value, otherwise.
initial(value, init) { value == (prior(value) == null ? init : prior(value)) }

/**
 * Leaf Node Types
 */

type URL extends String {
  validate() {
    this.test(/^((http[s]?):\/)?\/?([^:\/\s]+)((\/\w+)*\/)([\w\-\.]+[^#?\s]+)(.*)?(#[\w\-]+)?$/)
  }
}

type Email extends String {
  validate() {
    this.test(/^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/)
  }
}
